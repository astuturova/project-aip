import requests
from aiogram import types
from datetime import datetime


class ForecastService:
    """–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
    –ö–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.

    Methods:
        get_forecast_for_day(name: str, date): –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É.
        get_forecast_for_week(name): –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.

    """

    weatherCode = {
        "0": "Unknown",

        "1000": "—Å–æ–ª–Ω–µ—á–Ω–æ ‚òÄÔ∏è",
        "1100": "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–ª–Ω–µ—á–Ω–æ üå§Ô∏è",
        "1101": "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖÔ∏è",
        "1102": "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ–±–ª–∞—á–Ω–æ üå•Ô∏è",
        "1001": "–æ–±–ª–∞—á–Ω–æ ‚òÅÔ∏è. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö!",
        "2000": "—Ç—É–º–∞–Ω üò∂‚Äçüå´Ô∏è. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö!",
        "2100": "–ª—ë–≥–∫–∏–π —Ç—É–º–∞–Ω üò∂‚Äçüå´Ô∏è",
        "4000": "–º–æ—Ä–æ—Å—å ‚òîÔ∏è",
        "4001": "–¥–æ–∂–¥–ª–∏–≤–æ ‚òîÔ∏è. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –∑–æ–Ω—Ç!",
        "4200": "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å ‚òîÔ∏è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –í–∞–º –≤–∑—è—Ç—å –∑–æ–Ω—Ç!",
        "4201": "–ª–∏–≤–µ–Ω—å üåßÔ∏è. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –∑–æ–Ω—Ç!",
        "5000": "—Å–Ω–µ–≥–æ–ø–∞–¥ üå®Ô∏è",
        "5001": "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥–æ–ø–∞–¥ üå®Ô∏è",
        "5100": "–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®Ô∏è",
        "5101": "–º–µ—Ç–µ–ª—å ü•∂. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö!",
        "6000": "–∏–∑–º–æ—Ä–æ–∑—å ü•∂",
        "6001": "–≥—Ä–∞–¥ üßä",
        "6200": "–ª—ë–≥–∫–∏–π –≥—Ä–∞–¥ üßä",
        "6201": "—Å–∏–ª—å–Ω—ã–π –≥—Ä–∞–¥ üßä. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –∑–æ–Ω—Ç!",
        "7000": "–º–æ–∫—Ä—ã–π —Å–Ω–µ–≥ üå®Ô∏è",
        "7101": "—Å–∏–ª—å–Ω—ã–π –º–æ–∫—Ä—ã–π —Å–Ω–µ–≥ üå®Ô∏è",
        "7102": "–Ω–µ–º–Ω–æ–≥–æ –º–æ–∫—Ä–æ–≥–æ —Å–Ω–µ–≥–∞ üå®Ô∏è",
        "8000": "–≥—Ä–æ–∑–∞ üå©Ô∏è. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!"
    }

    def get_forecast_for_day(self, name: str, date):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç get –∑–∞–ø—Ä–æ—Å –Ω–∞ API, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç response –∏ –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
    –¥–ª—è –ø–æ—Å—Ç–æ—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.

    Args:
        name (str): –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
        date (datetime): –¥–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã

    Returns:
        dict: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞

    Raises:
        ValueError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
        requests.RequestException: –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π response

    """
        url = f"https://api.tomorrow.io/v4/weather/forecast?location={name}&timesteps=1d&apikey=gUV9cyqDoLGF5p6Y8VjSb0CqmdGTYEVs"

        headers = {"accept": "application/json"}

        response = requests.get(url, headers=headers)

        out = {
            "temperatureApparentAvg": None,
            "temperatureApparentMax": None,
            "temperatureApparentMin": None,
            "temperatureAvg": None,
            "temperatureMax": None,
            "temperatureMin": None,
            "windGustAvg": None,
            "windGustMax": None,
            "windGustMin": None,
            "windSpeedAvg": None,
            "windSpeedMax": None,
            "windSpeedMin": None,
            "humidityAvg": None,
            "humidityMax": None,
            "humidityMin": None,
            "weatherCodeMax": None,
            "weatherCodeMin": None
        }

        if response.ok:
            json_data = response.json()
            for elem in json_data["timelines"]["daily"]:
                if elem["time"][:len(str(date))] == str(date):
                    data = elem["values"]
                    for key in out:
                        if key in ["weatherCodeMax", "weatherCodeMin"]:
                            out[key] = self.weatherCode[str(data[key])]
                            continue
                        out[key] = data[key]
            out["location"] = json_data['location']['name']
            if name == "AE-DU":
                out['location'] = "United Arab Emirates, Dubai"
            return out
        else:
            raise requests.RequestException

    def get_forecast_for_week(self, name):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç get –∑–∞–ø—Ä–æ—Å –Ω–∞ API, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç response –∏ –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
    –¥–ª—è –ø–æ—Å—Ç–æ—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.

    Args:
        name (str): –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞

    Returns:
        dict: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞

    Raises:
        ValueError: –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
        requests.RequestException: –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π response

        """
        url = f"https://api.tomorrow.io/v4/weather/forecast?location={name}&timesteps=1d&apikey=GpZe9ZkYHUc34zdWZJ8r0GffrepVdW7B"

        headers = {"accept": "application/json"}

        response = requests.get(url, headers=headers)

        output_array = []

        if response.ok:
            json_data = response.json()
            for elem in json_data["timelines"]["daily"]:
                out = {
                    "temperatureApparentAvg": None,
                    "temperatureApparentMax": None,
                    "temperatureApparentMin": None,
                    "temperatureAvg": None,
                    "temperatureMax": None,
                    "temperatureMin": None,
                    "windGustAvg": None,
                    "windGustMax": None,
                    "windGustMin": None,
                    "windSpeedAvg": None,
                    "windSpeedMax": None,
                    "windSpeedMin": None,
                    "humidityAvg": None,
                    "humidityMax": None,
                    "humidityMin": None,
                    "weatherCodeMax": None,
                    "weatherCodeMin": None
                }
                data = elem["values"]
                out["time"] = datetime.strptime(elem["time"], '%Y-%m-%dT%H:%M:%SZ').date().strftime("%d.%m.%Y")
                for key in out:
                    if key in ["weatherCodeMax", "weatherCodeMin"]:
                        out[key] = self.weatherCode[str(data[key])]
                        continue
                    if key != "time":
                        out[key] = data[key]
                output_array.append(out)
                out["location"] = json_data['location']['name']
                if name == "AE-DU":
                    out['location'] = "United Arab Emirates, Dubai"
            return output_array
        else:
            raise requests.RequestException


class KeyboardConstructor:
    """–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        –ö–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Å–æ–∑–¥–∞–Ω–∏—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.

        Methods:
            get_menu_keyboard(): –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
            get_region_settings_keyboard(): –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞.
            get_timer_settings_keyboard(): –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞.

        """

    def get_menu_keyboard(self):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.

    Returns:
        types.InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–µ–Ω—é

        """
        buttons = [
            [
                types.InlineKeyboardButton(text="‚è∞ –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="forecast_tomorrow"),
                types.InlineKeyboardButton(text="üéè –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="forecast_today")
            ],
            [
                types.InlineKeyboardButton(text="üìÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="forecast_week")
            ],
            [
                types.InlineKeyboardButton(text="–†–µ–≥–∏–æ–Ω", callback_data="set_region"),
                types.InlineKeyboardButton(text="–¢–∞–π–º–µ—Ä", callback_data="set_timer")
            ]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    def get_region_settings_keyboard(self):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞.

            Returns:
                types.InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞

        """
        buttons = [
            [
                types.InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞", callback_data="region_moscow"),
                types.InlineKeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="region_petersburg")
            ],
            [
                types.InlineKeyboardButton(text="–ö–∞–∑–∞–Ω—å", callback_data="region_kazan"),
                types.InlineKeyboardButton(text="–í–æ–ª–≥–æ–≥—Ä–∞–¥", callback_data="region_volgograd")
            ],
            [
                types.InlineKeyboardButton(text="–î—É–±–∞–π", callback_data="region_dubai"),
                types.InlineKeyboardButton(text="–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ", callback_data="region_san-francisco")
            ]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard

    def get_timer_settings_keyboard(self):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞.

            Returns:
               types.InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞

        """
        buttons = [
            [
                types.InlineKeyboardButton(text="1 –º–∏–Ω—É—Ç–∞", callback_data="timer_minute"),
                types.InlineKeyboardButton(text="1 —á–∞—Å", callback_data="timer_hour")
            ],
            [
                types.InlineKeyboardButton(text="12 —á–∞—Å–æ–≤", callback_data="timer_day"),
                types.InlineKeyboardButton(text="24 —á–∞—Å–æ–≤", callback_data="timer_cycle")
            ]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard


class MessageConstructor:
    """–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
   –ö–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã.

   Methods:
       get_output_message_for_day(data, date): –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–µ–Ω—å.
       get_output_message_for_week(data): –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é.


    """

    def get_output_message_for_day(self, data, date):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–µ–Ω—å.

        Args:
            data (dict): –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
            date (str): –¥–∞—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã


        Returns:
            str: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã

        """
        return (f" üìç –í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {data['location']}\n\n"
                f" ‚ò∫ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {date}:\n"
                f" - –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –±—É–¥–µ—Ç {data['weatherCodeMax']}\n"
                f" - üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {data['temperatureAvg']} ‚ÑÉ, –Ω–æ –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {data['temperatureApparentAvg']} ‚ÑÉ\n"
                f" - üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ {data['humidityAvg']}%\n"
                f" - üå¨Ô∏è –í–µ—Ç–µ—Ä –¥—É–µ—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {data['windSpeedAvg']}–º/—Å\n"
                f" - üí® –ê –ø–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–≥–∞—é—Ç {data['windGustAvg']} –º/—Å")

    def get_output_message_for_week(self, data):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é.

        Args:
            data (dict): –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã

        Returns:
            str: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã

        """
        message = ""
        if len(data) != 0:
            message += data[0]['location'] + "\n\n"
        for elem in data:
            message += (f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {elem['time']}:\n"
                        f" - –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –±—É–¥–µ—Ç {elem['weatherCodeMax']}\n"
                        f" - üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {elem['temperatureAvg']} ‚ÑÉ, –Ω–æ –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {elem['temperatureApparentAvg']} ‚ÑÉ\n"
                        f" - üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ {elem['humidityAvg']}%\n"
                        f" - üå¨Ô∏è –í–µ—Ç–µ—Ä –¥—É–µ—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {elem['windSpeedAvg']} –º/—Å\n"
                        f" - üí® –ê –ø–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–≥–∞—é—Ç {elem['windGustAvg']} –º/—Å\n\n")
        return message[:-1]
