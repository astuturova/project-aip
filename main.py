import asyncio
import logging
from datetime import date, timedelta
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
import config
from utils import KeyboardConstructor, ForecastService

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token)
dp = Dispatcher()
keyboard_constructor = KeyboardConstructor()
forecast_service = ForecastService()
settings = {}


async def send_message_interval():
    while True:
        await asyncio.sleep(60)
        for key in settings.keys():
            settings[key]["time"] -= 60
            if settings[key]["time"] == 0:
                data = forecast_service.get_forecast_for_day(settings[key]['region'], date.today())
                message = get_output_message_for_day(data, "—Å–µ–≥–æ–¥–Ω—è")
                await bot.send_message(key, text=message, reply_markup=keyboard_constructor.get_menu_keyboard())
            settings[key]["time"] = settings[key]["time"]

def get_output_message_for_day(data, date):
    return (f" üìç –í—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {data['location']}\n\n"
            f" ‚ò∫ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {date}: \n"
            f" - üòÅ –í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –±—É–¥–µ—Ç {data['weatherCodeMax']}\n"
            f" - üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {data['temperatureAvg']} ‚ÑÉ, –Ω–æ –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {data['temperatureApparentAvg']} ‚ÑÉ\n"
            f" - üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ {data['humidityAvg']}%\n"
            f" - üå¨Ô∏è –í–µ—Ç–µ—Ä {date} –¥—É–µ—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {data['windSpeedAvg']}–º/—Å\n"
            f" - üí® –ê –ø–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–≥–∞—é—Ç {data['windGustAvg']} –º/—Å")

def get_output_message_for_week(data):
    message = ""
    if len(data) != 0:
        message += data[0]['location'] + "\n\n"
    for elem in data:
        message += (f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {elem['time']}: \n"
                    f"–í–∞—Å –æ–∂–∏–¥–∞–µ—Ç {elem['weatherCodeMax']}\n"
                    f"–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {elem['temperatureAvg']} ‚ÑÉ, –Ω–æ –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {elem['temperatureApparentAvg']} ‚ÑÉ\n"
                    f"–°—Ä–µ–¥–Ω—è—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {elem['humidityAvg']}\n"
                    f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {elem['windSpeedAvg']}\n"
                    f"–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞: {elem['windGustAvg']}\n\n")
    return message[:-1]


# –û—Ç–∫–ª–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_random(message: types.Message):
    chat_id = message.chat.id
    settings[chat_id] = {
        'region': "RU-MOW",
        'timer': 86400,
        "time": 86400
    }
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø—Ä–æ–Ω–æ–∑ –ø–æ–≥–æ–¥—ã",
        reply_markup=keyboard_constructor.get_menu_keyboard()
    )


@dp.callback_query(F.data.startswith("forecast_"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    chat_id = callback.message.chat.id
    message = ""
    if action == "tomorrow":
        data = forecast_service.get_forecast_for_day(settings[chat_id]['region'], date.today() + timedelta(days=1))
        message = get_output_message_for_day(data, "–∑–∞–≤—Ç—Ä–∞")
    elif action == "today":
        data = forecast_service.get_forecast_for_day(settings[chat_id]['region'], date.today())
        message = get_output_message_for_day(data, "—Å–µ–≥–æ–¥–Ω—è")
    elif action == "week":
        data = forecast_service.get_forecast_for_week(settings[chat_id]['region'])
        message = get_output_message_for_week(data)
    await update_message(callback.message, message)

    await callback.answer()


# –û—Ç–∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞" –∏ "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
@dp.callback_query(F.data.startswith("set_"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]

    if action == "region":
        await update_message_to_region_settings(callback.message)
    elif action == "timer":
        await update_message_to_timer_settings(callback.message)

    await callback.answer()


@dp.callback_query(F.data.startswith("region_"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    chat_id = callback.message.chat.id

    if action == "moscow":
        settings[chat_id]['region'] = "RU-MOW"
    elif action == "petersburg":
        settings[chat_id]['region'] = "RU-SPE"
    elif action == "kazan":
        settings[chat_id]['region'] = "RU-TA"
    elif action == "volgograd":
        settings[chat_id]['region'] = "RU-VGG"
    elif action == "dubai":
        settings[chat_id]['region'] = "AE-DU"
    elif action == "san-francisco":
        settings[chat_id]['region'] = "US-CA"

    data = forecast_service.get_forecast_for_day(settings[chat_id]['region'], date.today())
    message = get_output_message_for_day(data, "—Å–µ–≥–æ–¥–Ω—è")
    await update_message(callback.message, message)

    await callback.answer()


@dp.callback_query(F.data.startswith("timer_"))
async def callbacks_num(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    chat_id = callback.message.chat.id

    if action == "minute":
        settings[chat_id]['timer'] = 60
        settings[chat_id]['time'] = 60
    elif action == "hour":
        settings[chat_id]['timer'] = 3600
        settings[chat_id]['time'] = 3600
    elif action == "day":
        settings[chat_id]['timer'] = 43200
        settings[chat_id]['time'] = 43200
    elif action == "cycle":
        settings[chat_id]['timer'] = 86400
        settings[chat_id]['time'] = 86400

    data = forecast_service.get_forecast_for_day(settings[chat_id]['region'], date.today())
    message = get_output_message_for_day(data, "—Å–µ–≥–æ–¥–Ω—è")
    await update_message(callback.message, message)
    print(settings[chat_id]['timer'])
    await callback.answer()


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
async def update_message(message: types.Message, new_value: str):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            new_value,
            reply_markup=keyboard_constructor.get_menu_keyboard()
        )


async def update_message_to_region_settings(message: types.Message):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=keyboard_constructor.get_region_settings_keyboard()
        )


async def update_message_to_timer_settings(message: types.Message):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–π–º–µ—Ä:",
            reply_markup=keyboard_constructor.get_timer_settings_keyboard()
        )


async def main():
    loop = asyncio.get_event_loop()
    t1 = loop.create_task(send_message_interval())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
